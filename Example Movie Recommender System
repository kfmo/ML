% Loading movie ratings dataset 
%  Start by loading the movie ratings dataset to understand the
%  structure of the data
%  
fprintf('Loading movie ratings dataset.\n\n');

%  Load data
load ('[datafile].mat');

%  In this example, Y is a 1682x943 matrix, containing ratings (1-5) of 1682 movies from 
%  943 users
%
%  R is a 1682x943 matrix, where R(i,j) = 1 if and only if user j gave a
%  rating to movie i

%  From the matrix, we can compute statistics like average rating.
fprintf('Average rating for movie 1: %f \n\n', ...
        mean(Y(1, R(1, :))));

%  We can "visualize" the ratings matrix by plotting it with imagesc
imagesc(Y);
ylabel('Movies');
xlabel('Users');

fprintf('\nProgram paused. Press enter to continue.\n');
pause;

% Collaborative Filtering Cost Function 
%  Implement the cost function for collaborative filtering.
%  To help debug the cost function, a trained set of weights
%  has been included 

%  Load pre-trained weights (X, Theta, num_users, num_movies, num_features)
load (‘[paramFile].mat');

%  Reduce the dataset size so that this runs faster
num_users = 4; num_movies = 5; num_features = 3;
X = X(1:num_movies, 1:num_features);
Theta = Theta(1:num_users, 1:num_features);
Y = Y(1:num_movies, 1:num_users);
R = R(1:num_movies, 1:num_users);

%  Evaluate cost function
J = cofiCostFunc([X(:) ; Theta(:)], Y, R, num_users, num_movies, ...
               num_features, 0);
           
fprintf(['Cost at loaded parameters: %f '...
         '\n‘], J);

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


% Collaborative Filtering Gradient 
%  Now implement the collaborative filtering gradient function
  
fprintf('\nChecking Gradients (without regularization) ... \n');

%  Check gradients by running checkNNGradients
checkCostFunction;

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


% Collaborative Filtering Cost Regularization 
%  Now implement regularization for the cost function for 
%  collaborative filtering 

%  Evaluate cost function
J = cofiCostFunc([X(:) ; Theta(:)], Y, R, num_users, num_movies, ...
               num_features, 1.5);
           
fprintf(['Cost at loaded parameters: %f '...
         '\n'], J);

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


% Collaborative Filtering Gradient Regularization 
%  Proceed to implement regularization for the gradient

fprintf('\nChecking Gradients (with regularization) ... \n');

%  Check gradients by running checkNNGradients
checkCostFunction(1.5);  % adjust lambda as needed

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


% Entering ratings for a new user 
%  Before training the collaborative filtering model, first
%  add ratings that correspond to a new user 
%
movieList = getMovieList();

%  Initialize my ratings
my_ratings = zeros(1682, 1);

% Use a movie index for IDs of each movie in the dataset
% For example, if Toy Story has an ID of 1, you can set
% my_ratings(1) = 4 to rate it a “4”

% New user ratings are as follows:
my_ratings(7) = 3;
my_ratings(12)= 5;
my_ratings(54) = 4;
my_ratings(64)= 5;
my_ratings(66)= 3;
my_ratings(69) = 5;
my_ratings(183) = 4;
my_ratings(226) = 5;
my_ratings(355)= 5;

fprintf('\n\nNew user ratings:\n');
for i = 1:length(my_ratings)
    if my_ratings(i) > 0 
        fprintf('Rated %d for %s\n', my_ratings(i), ...
                 movieList{i});
    end
end

fprintf('\nProgram paused. Press enter to continue.\n');
pause;


% Learning Movie Ratings 
%  Train the collaborative filtering model on a movie rating 
%  dataset (in this example, 1682 movies and 943 users)

fprintf('\nTraining collaborative filtering...\n');

%  Load data
load('[datafile].mat');

%  Y is a 1682x943 matrix, containing ratings (1-5) of 1682 movies by 
%  943 users
%
%  R is a 1682x943 matrix, where R(i,j) = 1 if and only if user j gave a
%  rating to movie i

%  Add new user’s ratings to the data matrix
Y = [my_ratings Y];
R = [(my_ratings ~= 0) R];

%  Normalize Ratings
[Ynorm, Ymean] = normalizeRatings(Y, R);

%  Useful values, adjust as needed
num_users = size(Y, 2);
num_movies = size(Y, 1);
num_features = 10;

% Set initial parameters (Theta, X)
X = randn(num_movies, num_features);
Theta = randn(num_users, num_features);

initial_parameters = [X(:); Theta(:)];

% Set options for fmincg
options = optimset('GradObj', 'on', 'MaxIter', 100);

% Set Regularization
lambda = 10; % adjust as needed
theta = fmincg (@(t)(cofiCostFunc(t, Y, R, num_users, num_movies, ...
                                num_features, lambda)), ...
                initial_parameters, options);

% Unfold the returned theta back into U and W
X = reshape(theta(1:num_movies*num_features), num_movies, num_features);
Theta = reshape(theta(num_movies*num_features+1:end), ...
                num_users, num_features);

fprintf('Recommender system learning completed.\n');

fprintf('\nProgram paused. Press enter to continue.\n');
pause;

% Recommendation for new user 
%  After training the model, make recommendations by computing
%  the predictions matrix
%

p = X * Theta';
my_predictions = p(:,1) + Ymean;

movieList = getMovieList();

[r, ix] = sort(my_predictions, 'descend');
fprintf('\nTop recommendations for you:\n');
for i=1:10
    j = ix(i);
    fprintf('Predicting rating %.1f for movie %s\n', my_predictions(j), ...
            movieList{j});
end

fprintf('\n\nOriginal ratings provided:\n');
for i = 1:length(my_ratings)
    if my_ratings(i) > 0 
        fprintf('Rated %d for %s\n', my_ratings(i), ...
                 movieList{i});
    end
end
